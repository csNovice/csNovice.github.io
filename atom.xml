<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  <subtitle>csNovice的学习记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-03T04:52:36.141Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yz_l</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PyInstaller打包python程序遇到的问题</title>
    <link href="http://yoursite.com/2020/07/22/PyInstaller%E6%89%93%E5%8C%85python%E7%A8%8B%E5%BA%8F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/07/22/PyInstaller%E6%89%93%E5%8C%85python%E7%A8%8B%E5%BA%8F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-07-22T06:36:48.000Z</published>
    <updated>2020-08-03T04:52:36.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、pyinstaller使用"><a href="#1、pyinstaller使用" class="headerlink" title="1、pyinstaller使用"></a>1、pyinstaller使用</h1><p>PyInstaller命令行选项可以通过帮助信息查看：<br><code>pyinstaller --help</code></p><p><code>-y | --noconfirm</code>：直接覆盖输出文件，而无需提示，在多次重复运行命令时可避免反复确认。<br><code>-D | --onedir</code>：生成包含执行文件的目录（默认行为）。<br><code>-F | --onefile</code>：生成单一的可执行文件，不推荐使用。<br><code>-i | --icon [.ico | .exe | .icns]</code>：为 Windows/Mac 平台的执行文件指定图标。<br><code>--version-file [filename]</code>：添加文件版本信息。<br><code>-c | --console | --nowindowed</code>：通过控制台窗口运行程序 并且分配标准输入/输出，（默认行为）。<br><code>-w | --windowed | --noconsole</code>：不创建控制台窗口，也不分配标准输入/输出，主要用来运行 GUI 程序。没有输入输出会给调试带来一定困难，因此即便是 GUI 程序，建议在调试时禁用本选项，在最终发布时再打开。</p><h1 id="2、PyInstaller规格文件"><a href="#2、PyInstaller规格文件" class="headerlink" title="2、PyInstaller规格文件"></a>2、PyInstaller规格文件</h1><p>PyInstaller 在生成文件的同时会创建一个相应的.spec 文件，.spec 文件本质上是一个特殊的 Python 脚本，记录了生成所需的指令。</p><p>使用<code>pyinstaller [options] xxx.py</code>进行打包时，PyInstaller 会首先根据选项生成对应的 .spec 文件，然后执行 .spec 文件所指定的过程生成最终文件。因此，可以直接指定spec文件执行打包过程。</p><p>单目录模式生成的spec 文件格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = Analysis(...)</span><br><span class="line">pyz = PYZ(...)</span><br><span class="line">exe = EXE(...)</span><br><span class="line">coll = COLLECT(...)</span><br></pre></td></tr></table></figure><p>单文件模式生成的spec 文件格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = Analysis(...)</span><br><span class="line">pyz = PYZ(...)</span><br><span class="line">exe = EXE(...)</span><br></pre></td></tr></table></figure><p>可以将指定文件和指定目录打包进行打包，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = Analysis(...,</span><br><span class="line">             datas=[(<span class="string">'config.ini'</span>, <span class="string">'.'</span>),</span><br><span class="line">             (<span class="string">'modelsAndFiles'</span>, <span class="string">'modelsAndFiles'</span>)],</span><br><span class="line">             ...)</span><br></pre></td></tr></table></figure><p>将config.ini文件打包当可执行文件当前目录下，将modelsAndFiles目录打包到可执行文件当前目录下。</p><h1 id="3、PyInstaller-打包遇到问题"><a href="#3、PyInstaller-打包遇到问题" class="headerlink" title="3、PyInstaller 打包遇到问题"></a>3、PyInstaller 打包遇到问题</h1><p>1、在命令行中，使用<code>pyinstaller -D fun1.spec</code>命令</p><p>生成build，dist目录，进入./dist/fun1目录后，运行fun1.exe</p><p>出现如下</p><p>FileNotFoundError：’Counld not find module：caffe2_detectron_ops.dll‘：</p><p><img src= "/img/loading.gif" data-src="/2020/07/22/PyInstaller%E6%89%93%E5%8C%85python%E7%A8%8B%E5%BA%8F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/hexo_post_1.png" alt></p><p>可以使用<code>pyi-bindepend</code>查看caffe2_detectron_ops.dll的依赖</p><p>由于我没有配置环境变量，我直接知道pyi-bindepend.exe所在的文件，在此目录直接运行 </p><p><img src= "/img/loading.gif" data-src="/2020/07/22/PyInstaller%E6%89%93%E5%8C%85python%E7%A8%8B%E5%BA%8F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/hexo_post_2.png" alt></p><p>逐个依赖查看，发现缺少<code>libiomp5md.dll</code></p><p><strong>解决方法：</strong></p><p>将<code>libiomp5md.dll</code>复制到./dist/fun1目录即可解决。</p><blockquote><p>注意：只有Python3.8版本，打包才出现，我用Python3.7没出现这个问题。</p></blockquote><p>2、</p><p>将缺少的包导入后，可以运行exe，但是当点击人脸识别后，报错：</p><p><img src= "/img/loading.gif" data-src="/2020/07/22/PyInstaller%E6%89%93%E5%8C%85python%E7%A8%8B%E5%BA%8F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/hexo_post_3.png" alt></p><p><strong>解决方法：</strong></p><p>更换pytorch和torchvision的版本</p><p>最终更换为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pytorch==<span class="number">1.2</span><span class="number">.0</span></span><br><span class="line">torchvision==<span class="number">0.4</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>其他版本pytorch<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/" target="_blank" rel="noopener">下载链接</a></p><p>离线安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda install --offline -n envs_name xxx.tar.bz2</span><br><span class="line"></span><br><span class="line">envs_name:环境名</span><br><span class="line">xxx.tar.bz2:下载的包</span><br></pre></td></tr></table></figure><p>3、</p><p><img src= "/img/loading.gif" data-src="/2020/07/22/PyInstaller%E6%89%93%E5%8C%85python%E7%A8%8B%E5%BA%8F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/hexo_post_4.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ModuleNotFoundError: No module named <span class="string">'numpy.random.common'</span></span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><p>在打包生成的spec文件中，在hiddenimports参数中添加如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hiddenimports=[<span class="string">'numpy.random.common'</span>,<span class="string">'numpy.random.bounded_integers'</span>,<span class="string">'numpy.random.entropy'</span>]</span><br></pre></td></tr></table></figure><p>4、点击采集人像后，出现错误</p><p><img src= "/img/loading.gif" data-src="/2020/07/22/PyInstaller%E6%89%93%E5%8C%85python%E7%A8%8B%E5%BA%8F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/hexo_post_5.png" alt></p><p>numpy版本降低为1.17.0后，出现这个read-only错误。</p><p>一般是你读取的图片的时候，默认选择的是”r”,”rb”模式有关。</p><p>原本代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qimg = qimage2ndarray.array2qimage(np.asarray(img))</span><br></pre></td></tr></table></figure><p>修正的办法:　手动修改图片的读取状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img1 = np.asarray(img)</span><br><span class="line">img1.flags.writeable = <span class="literal">True</span>  <span class="comment"># 将数组改为读写模式</span></span><br><span class="line">qimg = qimage2ndarray.array2qimage(img1)</span><br></pre></td></tr></table></figure><p>修改后报错：</p><p><code>cannot set WRITABLE flag to True of this array</code></p><p>百度查博客，发现解决方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img1 = np.asarray(img)</span><br><span class="line">img1 = np.require(img, dtype=<span class="string">'f4'</span>, requirements=[<span class="string">'O'</span>, <span class="string">'W'</span>])</span><br><span class="line">qimg = qimage2ndarray.array2qimage(img1)</span><br></pre></td></tr></table></figure><p>5、在其他人电脑上运行出错</p><p><img src= "/img/loading.gif" data-src="/2020/07/22/PyInstaller%E6%89%93%E5%8C%85python%E7%A8%8B%E5%BA%8F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/hexo_post_6.png" alt></p><p>解决方法：</p><p>出现此错误的原因是缺少了ssl证书，因此可以从<a href="https://www.python.org/" target="_blank" rel="noopener">Python官网</a>上下载相应python版本的压缩包，解压后将解压包中的_ssl.pyd复制到Anaconda/envs目录下相应的环境中的DLLs下覆盖原文件，</p><p>将解压包中的libcrypto-1_1.dll、libssl-1_1.dll复制到Anaconda/envs目录下相应的环境的根目录即可解决问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、pyinstaller使用&quot;&gt;&lt;a href=&quot;#1、pyinstaller使用&quot; class=&quot;headerlink&quot; title=&quot;1、pyinstaller使用&quot;&gt;&lt;/a&gt;1、pyinstaller使用&lt;/h1&gt;&lt;p&gt;PyInstaller命令行选项可以
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>OpenCV学习</title>
    <link href="http://yoursite.com/2020/07/14/OpenCV%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/07/14/OpenCV%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-07-14T06:08:08.000Z</published>
    <updated>2020-07-22T08:55:41.062Z</updated>
    
    <content type="html"><![CDATA[<p>介绍</p><p>OpenCV是一个基于BSD许可（开源）发行的跨平台计算机视觉和机器学习软件库，可以运行在Linux、Windows、Android和Mac OS操作系统上。它轻量级而且高效——由一系列 C 函数和少量 C++ 类构成，同时提供了Python、Ruby、MATLAB等语言的接口，实现了图像处理和计算机视觉方面的很多通用算法。</p><p>我是在bilibili上看《Python 人脸识别——尚学堂》视频，接触到的OpenCV，接下来是学习的内容。</p><p>1、导入OpenVC模块，读取图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入模块</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="comment">#读取图片 </span></span><br><span class="line"><span class="comment">#img是一个numpy.ndarray对象，默认是以BGR三通道读取图片数据（三维数组）</span></span><br><span class="line">img=cv.imread(<span class="string">'test.jpg'</span>)     <span class="comment">#路径不能有中文</span></span><br><span class="line"><span class="comment">#以灰度图像方式读取图片数据（二维数组）</span></span><br><span class="line">img_gray = cv2.imread(<span class="string">"test.jpg"</span>,cv2.IMREAD_GRAYSCALE)</span><br></pre></td></tr></table></figure><p>2、将图片进行灰度转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将其转换为灰度的二维数组数据</span></span><br><span class="line">gray_img=cv.cvtColor(img,cv.COLOR_BGR2GRAY)</span><br></pre></td></tr></table></figure><p>3、显示图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示图片</span></span><br><span class="line">cv.imshow(<span class="string">'gray_img'</span>, img)</span><br><span class="line"><span class="comment">#等待键盘键入 单位毫秒 0=无限等待</span></span><br><span class="line">cv.waitKey(<span class="number">3000</span>)</span><br><span class="line"><span class="comment">#释放内存   由于OpenCV底层是C++编写的</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>4、图片保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv.imwrite(<span class="string">'gray_test.jpg'</span>, gray_img)</span><br></pre></td></tr></table></figure><p>5、修改图片尺寸</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">img=cv.imread(<span class="string">'test.jpg'</span>)</span><br><span class="line">cv.imshow(<span class="string">'old_img'</span>,img)</span><br><span class="line">print(<span class="string">'原来图片的形状'</span>, img.shape)</span><br><span class="line">resize_img=cv.resize(img, dsize=(<span class="number">626</span>, <span class="number">418</span>))</span><br><span class="line">cv.imshow(<span class="string">'resize_img'</span>, resize_img)</span><br><span class="line">print(<span class="string">'修改后图片的形状'</span>, resize_img.shape)</span><br></pre></td></tr></table></figure><p>6、绘制矩形</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cv.rectangle(img,(x,y),(x+w,y+h), color=(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),  thickness=<span class="number">2</span>)</span><br><span class="line"><span class="comment">#rectangle(img, pt1, pt2, color, thickness)</span></span><br><span class="line"><span class="comment"># img 图像. pt1 矩形的一个顶点。 pt2 矩形对角线上的另一个顶点</span></span><br><span class="line"><span class="comment"># color 线条颜色 (RGB) 或亮度（灰度图像 ）。</span></span><br><span class="line"><span class="comment"># thickness 组成矩形的线条的粗细程度。取负值时（如 CV_FILLED）函数绘制填充了色彩的矩形。</span></span><br></pre></td></tr></table></figure><p>7、绘制圆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cv.circle(img,center=(x,y),radius=r,color=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),thickness=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># center元组指圆心的坐标， radius是半径</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;介绍&lt;/p&gt;
&lt;p&gt;OpenCV是一个基于BSD许可（开源）发行的跨平台计算机视觉和机器学习软件库，可以运行在Linux、Windows、Android和Mac OS操作系统上。它轻量级而且高效——由一系列 C 函数和少量 C++ 类构成，同时提供了Python、Ruby、
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>springboot整合druid</title>
    <link href="http://yoursite.com/2020/07/07/springboot%E6%95%B4%E5%90%88druid/"/>
    <id>http://yoursite.com/2020/07/07/springboot%E6%95%B4%E5%90%88druid/</id>
    <published>2020-07-07T12:09:10.000Z</published>
    <updated>2020-07-07T15:14:04.844Z</updated>
    
    <content type="html"><![CDATA[<p>Druid 是一个用 Java 编写的面向列的开源分布式数据存储。 Druid 被设计来快速摄取大量事实数据，并在数据之上提供低延迟查询。Druid 这个名字来自于许多角色扮演游戏中的变形德鲁伊类角色，以反映系统架构可以迁移到解决不同类型的数据问题的特性。 Druid 通常用于商业智能 / OLAP 应用程序，以分析大量的实时和历史数据。</p><p>（Druid读音  英：[ˈdruːɪd]  美：[ˈdruːɪd]）</p><a id="more"></a><h1 id="Druid可以做什么？"><a href="#Druid可以做什么？" class="headerlink" title="Druid可以做什么？"></a><strong>Druid可以做什么？</strong></h1><p>1) 可以监控数据库访问性能，Druid内置提供了一个功能强大的StatFilter插件，能够详细统计SQL的执行性能，这对于线上分析数据库访问性能有帮助。 </p><p>2) 替换DBCP和C3P0。Druid提供了一个高效、功能强大、可扩展性好的数据库连接池。 </p><p>3) 数据库密码加密。直接把数据库密码写在配置文件中，这是不好的行为，容易导致安全问题。DruidDruiver和DruidDataSource都支持PasswordCallback。 </p><p>4) SQL执行日志，Druid提供了不同的LogFilter，能够支持Common-Logging、Log4j和JdkLog，你可以按需要选择相应的LogFilter，监控你应用的数据库访问情况。 </p><p>扩展JDBC，如果你要对JDBC层有编程的需求，可以通过Druid提供的Filter-Chain机制，很方便编写JDBC层的扩展插件。 </p><h1 id="SpringBoot整合Druid"><a href="#SpringBoot整合Druid" class="headerlink" title="SpringBoot整合Druid"></a>SpringBoot整合Druid</h1><p><strong>我的版本：</strong></p><p><strong>SpringBoot:2.3.1</strong></p><p><strong>druid:1.1.23</strong></p><h2 id="配置maven"><a href="#配置maven" class="headerlink" title="配置maven"></a><strong>配置maven</strong></h2><p>Druid 0.1.18 之后版本都发布到maven中央仓库中，所以你只需要在项目的pom.xml中加上dependency就可以了。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a><strong>配置application.yml</strong></h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line"><span class="comment">#   数据源基本配置 JDBC配置</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span>    <span class="comment">#数据库用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span>  <span class="comment">#数据库密码</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/databaseName?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>  <span class="comment">#数据源类型</span></span><br><span class="line"><span class="comment">#   数据源其他配置 连接池配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span>      <span class="comment">#配置初始化大小、最小、最大</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span>      <span class="comment">#配置获取连接等待超时的时间</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span>  <span class="comment">#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span>   <span class="comment">#配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span>  <span class="comment">#验证连接有效与否的SQL，不同的数据配置不同</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span>                  <span class="comment">#如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span>         <span class="comment">#打开PSCache</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span> <span class="comment">#最大PSCache连接</span></span><br><span class="line"><span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line"><span class="comment">#开启Druid的监控统计功能,StatFilter可以和其他的Filter配置使用   </span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,slf4j</span>             <span class="comment">#过滤器设置,默认日志框架为log4j</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span>        <span class="comment">#合并多个DruidDataSource的监控数据 </span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line">     <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br></pre></td></tr></table></figure><h2 id="编写Druid配置类"><a href="#编写Druid配置类" class="headerlink" title="编写Druid配置类"></a><strong>编写Druid配置类</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Druid的监控</span></span><br><span class="line">    <span class="comment">//1、配置一个管理后台的Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">        Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//访问http://localhost:8080/druid/</span></span><br><span class="line">        initParams.put(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>); <span class="comment">//登录账号</span></span><br><span class="line">        initParams.put(<span class="string">"loginPassword"</span>, <span class="string">"123456"</span>);<span class="comment">//登录密码</span></span><br><span class="line">        initParams.put(<span class="string">"allow"</span>, <span class="string">""</span>); <span class="comment">//默认就是允许所有访问；</span></span><br><span class="line"><span class="comment">//        initParams.put("deny", "192.168.15.21"); //拒绝访问</span></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、配置一个web监控的filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Druid-Spring-Boot-Starter"><a href="#Druid-Spring-Boot-Starter" class="headerlink" title="Druid Spring Boot Starter"></a><strong>Druid Spring Boot Starter</strong></h2><p>SpringBoot2.0整合Druid数据源可以加入<code>druid-spring-boot-starter</code>依赖。</p><p>Druid Spring Boot Starter 用于帮助你在Spring Boot项目中轻松集成Druid数据库连接池和监控。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Druid Spring Boot Starter 配置属性的名称完全遵照 Druid，你可以通过 Spring Boot 配置文件来配置Druid数据库连接池和监控，如果没有配置则使用默认值。，可以省去原本写Druid的一些配置文件或者@Configuration来配置，直接将配置写在application.yml里。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 使用阿里的Druid连接池</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 填写你数据库的url、登录名、密码和数据库名</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/databaseName?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment"># 连接池的配置信息</span></span><br><span class="line">      <span class="comment"># 初始化大小，最小，最大</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 打开PSCache，并且指定每个连接上PSCache的大小</span></span><br><span class="line">      <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">      <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">      <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000</span></span><br><span class="line">      <span class="comment"># 配置DruidStatFilter</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">"/*"</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"</span></span><br><span class="line">      <span class="comment"># 配置DruidStatViewServlet</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">"/druid/*"</span></span><br><span class="line">        <span class="comment"># IP白名单(没有配置或者为空，则允许所有访问)</span></span><br><span class="line">        <span class="attr">allow:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">,192.168.163.1</span></span><br><span class="line">        <span class="comment"># IP黑名单 (存在共同时，deny优先于allow)</span></span><br><span class="line">        <span class="attr">deny:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.73</span></span><br><span class="line">        <span class="comment">#  禁用HTML页面上的“Reset All”功能</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 登录名</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="comment"># 登录密码</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h1 id="使用数据库连接池的意义"><a href="#使用数据库连接池的意义" class="headerlink" title="使用数据库连接池的意义"></a>使用数据库连接池的意义</h1><p>建立数据库连接耗时耗费资源，一个数据库服务器能够同时建立的连接数也是有限的，在大型的Web应用中，可能同时会有成百上千的访问数据库的请求，如果Web应用程序为每一个客户请求分配一个数据库连接，将导致性能的急剧下降。<br>数据库连接池的意义在于，能够重复利用数据库连接（有点类似线程池的部分意义），提高对请求的响应时间和服务器的性能。连接池中提前预先建立了多个数据库连接对象，然后将连接对象保存到连接池中，当客户请求到来时，直接从池中取出一个连接对象为客户服务，当请求完成之后，客户程序调用close()方法，将连接对象放回池中。</p><p>在普通的数据库访问程序中，客户程序得到的连接对象是物理连接，调用连接对象的close()方法将关闭连接，而采用连接池技术，客户程序得到的连接对象是连接池中物理连接的一个句柄，调用连接对象的close（）方法，物理连接并没有关闭，数据源的实现只是删除了客户程序中的连接对象和池中的连接对象之间的联系。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Druid 是一个用 Java 编写的面向列的开源分布式数据存储。 Druid 被设计来快速摄取大量事实数据，并在数据之上提供低延迟查询。Druid 这个名字来自于许多角色扮演游戏中的变形德鲁伊类角色，以反映系统架构可以迁移到解决不同类型的数据问题的特性。 Druid 通常用于商业智能 / OLAP 应用程序，以分析大量的实时和历史数据。&lt;/p&gt;
&lt;p&gt;（Druid读音  英：[ˈdruːɪd]  美：[ˈdruːɪd]）&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="http://yoursite.com/2020/07/06/Hexo/"/>
    <id>http://yoursite.com/2020/07/06/Hexo/</id>
    <published>2020-07-06T10:04:28.000Z</published>
    <updated>2020-07-07T15:18:49.712Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p><strong>_config.yml</strong></p><p>网站的 配置 信息，您可以在此配置大部分的参数。</p><p><strong>package.json</strong></p><p>应用程序的信息。</p><p><strong>scaffolds</strong></p><p>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><p><strong>source</strong></p><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><p><strong>themes</strong></p><p>主题 文件夹。Hexo 会根据主题来生成静态页面。</p><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a><strong>指令</strong></h1><p><strong>init</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init [folder]</span></span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><p><strong>new</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new [layout] &lt;title&gt;</span></span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 _config.yml 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><p><strong>generate</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo generate</span></span><br></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br></pre></td></tr></table></figure><p><strong>publish</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo publish [layout] &lt;filename&gt;</span></span><br></pre></td></tr></table></figure><p>发表草稿。</p><p><strong>server</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server</span></span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><p><strong>deploy</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy</span></span><br></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure><p><strong>render</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo render &lt;file1&gt; [file2] ...</span></span><br></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o</code>, <code>--output</code></td><td align="left">设置输出路径</td></tr></tbody></table><p><strong>clean</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><p><strong>list</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo list &lt;<span class="built_in">type</span>&gt;</span></span><br></pre></td></tr></table></figure><p>列出网站资料。</p><p><strong>version</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo version</span></span><br></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a><strong>选项</strong></h2><p><strong>安全模式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo --safe</span></span><br></pre></td></tr></table></figure><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><p><strong>调试模式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo --debug</span></span><br></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到 GitHub。</p><p><strong>简洁模式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo --silent</span></span><br></pre></td></tr></table></figure><p>隐藏终端信息。</p><p><strong>自定义配置文件的路径</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo --config custom.yml</span></span><br></pre></td></tr></table></figure><p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p><p><strong>显示草稿</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo --draft</span></span><br></pre></td></tr></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><p><strong>自定义 CWD</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo --cwd /path/to/cwd</span></span><br></pre></td></tr></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>可以在 <code>_config.yml</code> 中修改大部份的配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site 网站</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span>         <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">''</span>        <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">''</span>     <span class="comment">#网站描述</span></span><br><span class="line">                    <span class="comment">#主要用于SEO，告诉搜索引擎一个关于站点的简单描述。</span></span><br><span class="line"><span class="attr">keywords:</span>           <span class="comment">#关键字,用逗号分隔多个关键字</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">yz_l</span>        <span class="comment">#您的名字，用于主题显示文章的作者。</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span>        <span class="comment">#网站使用的语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">''</span>        <span class="comment">#网站时区。Hexo 默认使用您电脑的时区。时区列表。</span></span><br><span class="line">                    <span class="comment">#比如说：America/New_York, Japan, 和 UTC 。</span></span><br><span class="line"><span class="comment"># URL 网址</span></span><br><span class="line"><span class="comment">## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite.com</span>                <span class="comment">#网址</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span>                                 <span class="comment">#网站根目录</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span>    <span class="comment">#文章的永久链接格式</span></span><br><span class="line"><span class="attr">permalink_defaults:</span>                     <span class="comment">#永久链接中各部分的默认值</span></span><br><span class="line"><span class="attr">pretty_urls:</span>                            <span class="comment">#将permalink变量重写为pretty_urls</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span>                  <span class="comment">#设置为false以从永久链接中删除末尾的“index.html”</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span>                   <span class="comment">#设置为false以从永久链接中删除末尾的“.html”,对index.html无效</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Directory 目录</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span>          <span class="comment">#资源文件夹，这个文件夹用来存放内容。</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span>          <span class="comment">#公共文件夹，这个文件夹用于存放生成(执行hexo g)的站点文件。</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span>               <span class="comment">#标签文件夹</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span>       <span class="comment">#归档文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span>    <span class="comment">#分类文件夹</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span>    <span class="comment">#Include code 文件夹</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span>             <span class="comment">#国际化（i18n）文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span>                <span class="comment">#跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</span></span><br><span class="line">                            <span class="comment">#匹配到的文件将会被不做改动地复制到public文件夹，如果路径对应的是我们的文章，那会直接忽略掉该文章</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing 文章</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span>    <span class="comment">#新文章的文件名称</span></span><br><span class="line">                            <span class="comment">#使用hexo new来构造文章的，生成的文章名就是通过这里配置的</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span>        <span class="comment">#预设布局</span></span><br><span class="line">                            <span class="comment">#hexo有三种默认布局:post，draft，page，这里设置默认值在使用hexo new就可以直接创建对应默认类型的文章，设置了post就等同于说在命令行执行hexo new &lt;name&gt;和执行hexo new post &lt;name&gt;是一样的</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span>            <span class="comment">#把标题转换为 title case</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>              <span class="comment">#是否在新标签中打开链接</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span>               <span class="comment">#enable对当前网站（site）生效或仅对文章（post）生效</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">''</span>               <span class="comment">#需要排除的域名</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span>            <span class="comment">#把文件名称转换为 (1) 小写或 (2) 大写，默认不转换(0)</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span>        <span class="comment">#是否显示草稿（是否渲染草稿文件）</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span>    <span class="comment">#是否启动资源文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span>        <span class="comment">#是否把链接改为与根目录的相对地址</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span>                <span class="comment">#是否显示当前时间之后的文章，默认为true</span></span><br><span class="line">                            <span class="comment">#如果设置为false，若我们文章设置的日期是未来的日期，就不会显示</span></span><br><span class="line"><span class="attr">highlight:</span>                  <span class="comment">#代码块的设置</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>              <span class="comment">#开启代码高亮</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span>         <span class="comment">#显示代码的行数</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span>        <span class="comment">#如果未指定语言，就自动检测</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">''</span>           <span class="comment">#用n个空格来代表tab键，如果值为空，则不会代替tab键</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span>                <span class="comment">#是否将代码放在table标签里</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span>               <span class="comment">#是否对CSS类使用hljs-*前缀</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Home page setting 主页设置</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">''</span>                  <span class="comment">#主页对应的路径，默认为’’，即域名根目录就是主页的路径</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span>              <span class="comment">#每页显示的帖子数，默认为10 （0表示禁用分页）</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span>           <span class="comment">#帖子的排序，默认为-date，即按日期倒序排</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag 分类 &amp; 标签</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span> <span class="comment">#默认分类</span></span><br><span class="line"><span class="attr">category_map:</span>                   <span class="comment">#分类别名</span></span><br><span class="line"><span class="attr">tag_map:</span>                        <span class="comment">#标签别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements 元数据元素</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span>            <span class="comment">#是否在页面开头插入下面的meta标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format 日期 / 时间格式</span></span><br><span class="line"><span class="comment">##Hexo 使用 Moment.js 来解析和显示时间。</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span>         <span class="comment">#日期格式，默认为YYYY-MM-DD，即年月日</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span>           <span class="comment">#时间格式，默认为HH:mm:ss，即时分秒</span></span><br><span class="line"><span class="attr">use_date_for_updated:</span> <span class="literal">false</span>     <span class="comment">#除非在front-matter设置了更新日期，否则使用md文件的修改日期作为更新日期</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination 分页</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span>                    <span class="comment">#每页显示的文章量 (0 = 关闭分页功能)</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span>            <span class="comment">#分页目录</span></span><br><span class="line">                                <span class="comment">#对应于public/archives/page，如果只有一页是不会生成这个文件夹的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s) 包括或不包括目录和文件</span></span><br><span class="line"><span class="attr">include:</span>        <span class="comment">#Hexo 默认会忽略隐藏文件和文件夹</span></span><br><span class="line">                <span class="comment">#（包括名称以_和.开头的文件和文件夹，Hexo 的 _posts和 _data等目录除外）。</span></span><br><span class="line">                <span class="comment">#通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。</span></span><br><span class="line"><span class="attr">exclude:</span>        <span class="comment">#Hexo 会忽略这些文件和目录</span></span><br><span class="line"><span class="attr">ignore:</span>         <span class="comment">#忽略的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions扩展</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/ </span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">yilia</span>    <span class="comment">#当前主题名称。值为false时禁用主题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment 部署</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span> </span><br><span class="line">  <span class="attr">type:</span>                     <span class="comment">#部署服务器的类别</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span>    <span class="comment">#库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">[branch]</span>          <span class="comment">#分支名称</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">[message]</span>        <span class="comment">#自定义提交信息 </span></span><br><span class="line">                            <span class="comment">#(默认为 Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;)</span></span><br></pre></td></tr></table></figure><h1 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span>  </span><br><span class="line"> <span class="attr">type:</span> <span class="string">git</span>  </span><br><span class="line"> <span class="attr">repo:</span> <span class="string">git@github.com:csNovice/csNovice.github.io.git</span> <span class="comment">#配置SSH免密登录</span></span><br><span class="line"> <span class="comment">#repo: https://github.com/csNovice/csNovice.github.io.git #每次都要输入账号密码</span></span><br><span class="line"> <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p><strong>注意：SSH和Https的仓库地址的不同之处</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ssh：</span>      <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line"><span class="attr">https:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line"><span class="comment">#ssh com后面是:  https com后面是/</span></span><br></pre></td></tr></table></figure><p>写这篇笔记的时候发现一个问题，就是用Typora写yaml文件时，用tab进行缩进会出现问题。</p><p>在Typora上调整到对齐，在博客上显示就不是对齐。</p><p>主要原因时在博客上的tab是8个空格，而在Typora上是4个空格，因此就会出现问题。</p><p>百度之后，发现yaml不支持tab缩进。</p><p>因此再写yaml时直接用空格来进行对齐，绝对不要用tab。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://yoursite.com/2020/07/05/Git/"/>
    <id>http://yoursite.com/2020/07/05/Git/</id>
    <published>2020-07-04T16:00:00.000Z</published>
    <updated>2020-07-07T15:19:17.089Z</updated>
    
    <content type="html"><![CDATA[<p>Git学习笔记：<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的官方网站</a></p><a id="more"></a><h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><p>初始化一个Git仓库，使用<code>git init</code>命令。</p><p>添加文件到Git仓库，分两步：</p><ol><li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li><li>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</li></ol><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><p>3个概念，工作区（<strong>Working Directory</strong>），暂存区（<strong>index /stage</strong>），本地仓库（<strong>Repository</strong>）</p><ul><li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li><li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li></ul><ol><li><code>git diff</code>：是查看工作区与暂存区的差别的。</li><li><code>git diff -- cached</code>：是查看暂存区与仓库的差别的。</li><li><code>git diff HEAD</code>：是查看工作区和仓库的差别的。其中：HEAD代表的是最近的一次commit的信息。</li></ol><ul><li><p><code>HEAD</code>指向的版本就是当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p><p>因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</p></li><li><p>用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</p><p>如果嫌输出信息太多，可以加上<code>--pretty=oneline</code>参数： <code>git log --pretty=oneline</code></p></li><li><p>用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p></li></ul><h1 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h1><p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><p><code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p><p>用<code>git diff HEAD -- &lt;file&gt;</code>命令可以查看工作区和版本库里面最新版本的区别</p><h1 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h1><p><code>git checkout -- file</code>可以丢弃工作区的修改</p><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><p>用命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。</p><p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p><p>小结：</p><p>​        场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>​        场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>​        场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，可以进行版本回退，不过前提是没有推送到远程库。</p><h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><p>在文件管理器中把文件删了，或者用<code>rm</code>命令删了</p><p>现在你有两个选择:</p><p>​        一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>,文件就从版本库中被删除了。</p><p> <strong>小提示：先手动删除文件，然后使用<code>git rm &lt;file&gt;</code>和<code>git add &lt;file&gt;</code>效果是一样的。</strong></p><p>​        另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -- test.txt</span></span><br></pre></td></tr></table></figure><p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><p> <strong>注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！</strong></p><h1 id="创建和合并分支"><a href="#创建和合并分支" class="headerlink" title="创建和合并分支"></a>创建和合并分支</h1><p>Git鼓励大量使用分支：</p><p>1、查看分支：<code>git branch</code></p><p>2、创建分支：<code>git branch &lt;name&gt;</code></p><p>3、切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p><p>​        <strong>注意到切换分支使用<code>git checkout &lt;branch&gt;</code>，而前面讲过的撤销修改则是</strong></p><p><strong><code>git checkout -- &lt;file&gt;</code>，同一个命令，有两种作用，确实有点令人迷惑。</strong></p><p>​        <strong>实际上，切换分支这个动作，用<code>switch</code>更科学。</strong></p><p>4、创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout dev</span></span><br></pre></td></tr></table></figure><p>5、合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>6、删除分支：<code>git branch -d &lt;name&gt;</code></p><h1 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h1><p>人生不如意之事十之八九，合并分支往往也不是一帆风顺的。</p><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p><p>用<code>git log --graph</code>命令可以看到分支合并图。</p><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>用<code>git remote -v</code>查看远程库信息</p><p>删除已有的GitHub远程库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure><p>一个本地库能不能既关联GitHub，又关联Gitee呢？</p><p>答案是肯定的，因为git本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库。</p><p>使用多个远程库时，我们要注意，git给远程库起的默认名称是<code>origin</code>，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git学习笔记：&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰的官方网站&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JPA使用@Query注解实现update</title>
    <link href="http://yoursite.com/2020/07/04/JPA%E4%BD%BF%E7%94%A8-Query%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0update/"/>
    <id>http://yoursite.com/2020/07/04/JPA%E4%BD%BF%E7%94%A8-Query%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0update/</id>
    <published>2020-07-03T16:00:00.000Z</published>
    <updated>2020-07-10T10:05:47.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JPA使用-Query注解实现update"><a href="#JPA使用-Query注解实现update" class="headerlink" title="JPA使用@Query注解实现update"></a>JPA使用@Query注解实现update</h1><p>在做项目中，遇到的用JPA更新数据库问题</p><p>用jpa中的save()方法，更新全部字段时会正常实现，可是在只更新部分字段时，会发现没有更新的字段被置为null。</p><p>可以通过使用@Query注解来解决。</p><a id="more"></a><h2 id="HQL语句"><a href="#HQL语句" class="headerlink" title="HQL语句"></a>HQL语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Modifying;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.query.Param;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"update MedicalSteelPlate msp set msp.shelfNumber= :shelfNumber, msp.type= :type where msp.id= :id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateEdit</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id, @<span class="title">Param</span><span class="params">(<span class="string">"shelfNumber"</span>)</span> String shelfNumber, @<span class="title">Param</span><span class="params">(<span class="string">"type"</span>)</span> String type)</span>;</span><br></pre></td></tr></table></figure><p><code>@Query</code>注解查询适用于所查询的数据无法通过关键字查询得到结果的查询。这种查询可以摆脱像关键字查询那样的约束，将查询直接在相应的接口方法中声明，结构更为清晰，这是Spring Data的特有实现。</p><p><code>@Modifying</code> 注解代表允许修改，在@Query注解中实现DELETE和UPDATE操作的时候必须加上该注解，以通知Spring Data 这是一个DELETE或UPDATE操作。</p><p><code>@Transactional</code>注解用于提交事务。</p><h2 id="原生SQL语句"><a href="#原生SQL语句" class="headerlink" title="原生SQL语句"></a>原生SQL语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"update tb_medicalsteelplate msp set msp.shelf_number=?2, msp.type=?3 where msp.id=?1"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateEdit</span><span class="params">(Integer id, String shelfNumber, String type)</span></span>;</span><br></pre></td></tr></table></figure><p><code>nativeQuery = true</code>  即为本地查询，就是使用原生的 sql 语句进行查询数据库的操作。但是在 Query 中原生态查询默认是关闭的,需要手动设置为true</p><p>若没有<code>nativeQuery = true</code>，select * from xxx 中的xxx就不是数据库中对应的真正的表名而是对应的实体名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_medicalsteelplate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MedicalSteelPlate</span> </span></span><br><span class="line"><span class="class">//<span class="title">MedicalSteelPlate</span> 为实体名，真正的数据库表名为<span class="title">tb_medicalsteelplate</span></span></span><br></pre></td></tr></table></figure><p>即可以修改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"update MedicalSteelPlate msp set msp.shelfNumber=?2, msp.type=?3 where msp.id=?1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateEdit</span><span class="params">(Integer id, String shelfNumber, String type)</span></span>;</span><br></pre></td></tr></table></figure><p>看自己博客的时候发现，博客上的排版和Markdown预览的排版不一样。</p><p>寻找原因，最后发现是因为hexo的Markdown渲染引擎的原因。</p><p>这篇博客就是因为单行代码用```包起来，所以导致了格式错误。</p><p><strong>注意事项：</strong></p><p><strong># 后面要有空格</strong></p><p><strong>单行代码用``</strong></p><p><strong>代码块用```包起来</strong></p><p><strong>缩进可能变成代码块</strong></p><p><strong>换行可能导致有序列表断开</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JPA使用-Query注解实现update&quot;&gt;&lt;a href=&quot;#JPA使用-Query注解实现update&quot; class=&quot;headerlink&quot; title=&quot;JPA使用@Query注解实现update&quot;&gt;&lt;/a&gt;JPA使用@Query注解实现update&lt;/h1&gt;&lt;p&gt;在做项目中，遇到的用JPA更新数据库问题&lt;/p&gt;
&lt;p&gt;用jpa中的save()方法，更新全部字段时会正常实现，可是在只更新部分字段时，会发现没有更新的字段被置为null。&lt;/p&gt;
&lt;p&gt;可以通过使用@Query注解来解决。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
